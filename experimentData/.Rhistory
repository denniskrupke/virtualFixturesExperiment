demo()
potmath
plotmath
plotmath()
demo(plotmath)
demo(graphics)
demo(persp)
WorldTrajectoriesRightHand_fixed <- read.csv("~/WorldTrajectoriesRightHand_fixed.csv")
View(WorldTrajectoriesRightHand_fixed)
shapiro.test(x)
shapiro.test(y)
shapiro.test(z)
z
View(WorldTrajectoriesRightHand_fixed)
shapiro.test(WorldTrajectoriesRightHand_fixed)
shapiro.test(WorldTrajectoriesRightHand_fixed.x)
shapiro.test(WorldTrajectoriesRightHand_fixed[1])
show(WorldTrajectoriesRightHand_fixed[1])
show(WorldTrajectoriesRightHand_fixed.x)
show(WorldTrajectoriesRightHand_fixed(1))
shapiro.test(WorldTrajectoriesRightHand_fixed[1])
shapiro.test(WorldTrajectoriesRightHand_fixed[2])
shapiro.test(WorldTrajectoriesRightHand_fixed.x)
WorldTrajectoriesRightHand_fixed
WorldTrajectoriesRightHand_fixed[1:]
WorldTrajectoriesRightHand_fixed[:1]
WorldTrajectoriesRightHand_fixed[1]
WorldTrajectoriesRightHand_fixed[2]
WorldTrajectoriesRightHand_fixed[3]
WorldTrajectoriesRightHand_fixed[4]
shapiro.test(WorldTrajectoriesRightHand_fixed[4])
WorldTrajectoriesRightHand_fixed[4;].isNumeric
WorldTrajectoriesRightHand_fixed[4;].isNumeric()
WorldTrajectoriesRightHand_fixed[4].isNumeric()
WorldTrajectoriesRightHand_fixed[4].is.numeric()
WorldTrajectoriesRightHand_fixed[4].is.numeric
is.numeric(WorldTrajectoriesRightHand_fixed[4].)
is.numeric(WorldTrajectoriesRightHand_fixed[4])
is.numeric(WorldTrajectoriesRightHand_fixed[4;])
is.numeric(WorldTrajectoriesRightHand_fixed[4:])
is.numeric(WorldTrajectoriesRightHand_fixed[4])
is.numeric(WorldTrajectoriesRightHand_fixed[3])
is.numeric(WorldTrajectoriesRightHand_fixed[2])
is.numeric(WorldTrajectoriesRightHand_fixed[1])
is.numeric(x)
x
x = WorldTrajectoriesRightHand_fixed[3]
x
attach(WorldTrajectoriesRightHand_fixed)
x
is.numeric(x)
is.na(x)
tlxZeroGravity <- read.csv("~/tlxZeroGravity.csv")
View(tlxZeroGravity)
attach(tlxZeroGravity)
variable.names(tlxZeroGravity)
shapiro.test(tlx_Score)
shapiro.test(workload_physical)
shapiro.test(workload_mental)
shapiro.test(workload_effort)
shapiro.test(tlx_Score)
qqnorm(tlx_Score)
qqnorm(workload_effort)
qqnorm(tlx_Score)
View(tlxZeroGravity)
latencyData <- read.csv("~/ownCloud/documents_kopie/Uni.Arbeit/TAMS/OS_WS1516/plots/latencyData.csv", header=FALSE)
View(latencyData)
boxplot(V3)
V3
v3
latencyData
latencyData[4,]
latencyData[,4]
latencyData[,3]
boxplot(latencyData[,3])
boxplot(latencyData[,3], ylab="latency in [ms]" )
boxplot(latencyData[,3], ylab="latency in [ms]", main="Latency in the Unity/ROS-control loop")
boxplot(latencyData[,3], ylab="latency in [ms]", main="Latency in the Unity/ROS-control loop", parm=1:2)
boxplot(latencyData[,3], ylab="latency in [ms]", main="Latency in the Unity/ROS-control loop", parm=1:2,fit=1)
boxplot(latencyData[,3], ylab="latency in [ms]", main="Latency in the Unity/ROS-control loop", parm=1:3,fit=1)
boxplot(latencyData[,3], ylab="latency in [ms]", main="Latency in the Unity/ROS-control loop", 1:4)
boxplot(latencyData[,3], ylab="latency in [ms]", main="Latency in the Unity/ROS-control loop")
boxplot(latencyData[,3], ylab="latency in [ms]", main="Latency in the Unity/ROS-control loop")
png(
"test.png",
width     = 3.25,
height    = 3.25,
units     = "in",
res       = 1200,
pointsize = 4
)
png(
"test.png",
width     = 3.25,
height    = 3.25,
units     = "in",
res       = 1200,
pointsize = 4
)
boxplot(latencyData[,3], ylab="latency in [ms]", main="Latency in the Unity/ROS-control loop")
png(
"test.png",
width     = 3.25,
height    = 3.25,
units     = "in",
res       = 1200,
pointsize = 4
)
boxplot(latencyData[,3], ylab="latency in [ms]", main="Latency in the Unity/ROS-control loop")
dev.off()
latencyDataBestCase_localAndOnlyPing <- read.csv("/Volumes/KINGSTON/krupke/latencyDataBestCase_localAndOnlyPing.txt", header=FALSE)
View(latencyDataBestCase_localAndOnlyPing)
v3
V3
boxplot(latencyDataBestCase_localAndOnlyPing[,3], ylab="latency in [ms]", main="Latency in the Unity/ROS-control loop")
boxplot(latencyDataBestCase_localAndOnlyPing[,3], ylab="latency in [ms]", main="Roundtrip Latency in the Unity/ROS-control loop")
latencyDataWithStreaming <- read.csv("/Volumes/KINGSTON/krupke/latencyDataWithStreaming.txt", header=FALSE)
View(latencyDataWithStreaming)
boxplot(latencyDataBestCase_localAndOnlyPing[,3], ylab="latency in [ms]", main="Roundtrip Latency in the Unity/ROS-control loop")
boxplot(latencyDataWithStreaming[,3], ylab="latency in [ms]", main="Roundtrip Latency in the Unity/ROS-control loop")
latencyDataWithStreaming <- read.csv("/Volumes/KINGSTON/krupke/latencyDataWithStreaming.txt", header=FALSE)
View(latencyDataWithStreaming)
boxplot(latencyDataWithStreaming[,3], ylab="latency in [ms]", main="Roundtrip Latency in the Unity/ROS-control loop")
latencyData_bestCasetams53 <- read.csv("/Volumes/KINGSTON/krupke/latencyData_bestCasetams53.txt", header=FALSE)
View(latencyData_bestCasetams53)
boxplot(latencyData_bestCasetams53[,3], ylab="latency in [ms]", main="Roundtrip Latency in the Unity/ROS-control loop")
latencyData_bestCasetams53 <- read.csv("/Volumes/KINGSTON/krupke/latencyData_bestCasetams53.txt", header=FALSE)
View(latencyData_bestCasetams53)
boxplot(latencyData_bestCasetams53[,3], ylab="latency in [ms]", main="Roundtrip Latency in the Unity/ROS-control loop")
latencyDataWithStreamingAndJointStatePublishers <- read.csv("/Volumes/KINGSTON/krupke/latencyDataWithStreamingAndJointStatePublishers.txt", header=FALSE)
View(latencyDataWithStreamingAndJointStatePublishers)
boxplot(latencyDataWithStreamingAndJointStatePublishers[,3], ylab="latency in [ms]", main="Roundtrip Latency in the Unity/ROS-control loop")
hist(latencyDataWithStreamingAndJointStatePublishers[,3], ylab="latency in [ms]", main="Roundtrip Latency in the Unity/ROS-control loop")
hist(latencyDataWithStreamingAndJointStatePublishers[,3], xlab="latency in [ms]", ylab="count of occurrance in 300 repetitions" main="Roundtrip Latency in the Unity/ROS-control loop")
hist(latencyDataWithStreamingAndJointStatePublishers[,3], xlab="latency in [ms]", ylab="count of occurrance in 300 repetitions", main="Roundtrip Latency in the Unity/ROS-control loop")
hist(latencyDataWithStreamingAndJointStatePublishers[,3], xlab="latency in [ms]", ylab="count of occurrances in 300 repetitions", main="Roundtrip Latency in the Unity/ROS-control loop")
plot(latencyDataWithStreamingAndJointStatePublishers[,3], xlab="latency in [ms]", ylab="count of occurrances in 300 repetitions", main="Roundtrip Latency in the Unity/ROS-control loop")
plot(latencyDataWithStreamingAndJointStatePublishers[,3], ylab="latency in [ms]", xlab="repetitions", main="Roundtrip Latency in the Unity/ROS-control loop")
plot(latencyDataWithStreamingAndJointStatePublishers[,3], ylab="latency in [ms]", xlab="repetitions", main="Roundtrip Latency in the Unity/ROS-control loop")
setwd("git/virtualFixtures/experimentData/")
q()
